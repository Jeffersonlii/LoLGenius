{"version":3,"sources":["dashboard/modelinfo/ModelInfo.jsx","dashboard/dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["ModelInfo","id","Dashboard","React","value","setValue","loading","setLoading","undefined","result","setResult","isDrawerOpen","setIsDrawerOpen","onChange","e","target","size","SIZE","large","placeholder","clearOnEscape","place","disabled","onClick","axios","get","replace","then","res","data","error","catch","response","msg","win","positive","href","preventDefault","map","content","artwork","props","rel","Date","getFullYear","isOpen","autoFocus","onClose","anchor","ANCHOR","bottom","showBackdrop","engine","Styletron","App","theme","LightTheme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dca0407d.chunk.js","sourcesContent":["import './ModelInfo.scss';\r\nimport * as React from 'react';\r\n\r\nfunction ModelInfo() {\r\n    return (\r\n        <div id=\"mi-host\">\r\n            <div id=\"data-features\">\r\n                <h1>Data Features</h1>\r\n                <p>\r\n                    Data is collected via the Riot Games API, currently 20\r\n                    features are used to train the model\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        10 features for each player's MMR (collected via\r\n                        whatismymmr API)\r\n                    </li>\r\n                    <li>10 features for each player's Tilt Score</li>\r\n                    <ul>\r\n                        <li>\r\n                            Calculated as the weighted sum of the player's\r\n                            performance in their last 5 games\r\n                        </li>\r\n                    </ul>\r\n                </ul>\r\n                <p>\r\n                    {' '}\r\n                    These features were selected on the fundemental fact that\r\n                    the team with the better players win on average\r\n                </p>\r\n                <p>\r\n                    {' '}\r\n                    Data was collected in 16 hours and resulting in 850 total\r\n                    data points\r\n                </p>\r\n            </div>\r\n            <div id=\"model\">\r\n                <h1>Model</h1>\r\n                <p>\r\n                    The machine learning model used is a neural network with 3\r\n                    hidden layes of size 8, with relu activation\r\n                </p>\r\n                <h2>Summaries</h2>\r\n                <h3>Training Set Accuracy</h3>{' '}\r\n                <code>\r\n                    <pre>\r\n                        {`\r\n              precision    recall  f1-score   support\r\n\r\n       False       0.81      0.74      0.77       294\r\n        True       0.76      0.83      0.79       299\r\n\r\n    accuracy                           0.78       593\r\n   macro avg       0.79      0.78      0.78       593\r\nweighted avg       0.79      0.78      0.78       593\r\n                                \r\n                        `}\r\n                    </pre>\r\n                </code>\r\n                <h3>Validation Set Accuracy</h3>\r\n                <code>\r\n                    <pre>\r\n                        {`\r\n              precision    recall  f1-score   support\r\n\r\n       False       0.78      0.71      0.74       131\r\n        True       0.72      0.79      0.75       124\r\n\r\n    accuracy                           0.75       255\r\n   macro avg       0.75      0.75      0.75       255\r\nweighted avg       0.75      0.75      0.75       255\r\n                                \r\n                        `}\r\n                    </pre>\r\n                </code>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModelInfo;\r\n","import './dashboard.scss';\r\nimport { Input, SIZE } from 'baseui/input';\r\nimport * as React from 'react';\r\nimport { Button } from 'baseui/button';\r\nimport { ListItem, ListItemLabel } from 'baseui/list';\r\nimport ChevronRight from 'baseui/icon/chevron-right';\r\nimport axios from 'axios';\r\nimport { Spinner } from 'baseui/spinner';\r\nimport { Drawer, ANCHOR } from 'baseui/drawer';\r\n\r\nimport ModelInfo from './modelinfo/ModelInfo';\r\nfunction Dashboard() {\r\n    const [value, setValue] = React.useState('');\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [result, setResult] = React.useState(undefined);\r\n    const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\r\n\r\n    return (\r\n        <div id=\"host\">\r\n            <section id=\"title-section\">LoL Genius</section>\r\n            <section id=\"input-area\">\r\n                <Input\r\n                    value={value}\r\n                    onChange={(e) => setValue(e.target.value)}\r\n                    size={SIZE.large}\r\n                    placeholder=\"Summoner Name\"\r\n                    clearOnEscape\r\n                    place\r\n                />\r\n                <Button\r\n                    disabled={loading}\r\n                    onClick={() => {\r\n                        setLoading(true);\r\n                        setResult(undefined);\r\n                        // http://127.0.0.1:5000\r\n                        axios\r\n                            .get(\r\n                                `/api/winprob-by-summoner/${\r\n                                    value === ''\r\n                                        ? '%20'\r\n                                        : value.replace(/\\s/g, '%20')\r\n                                }`\r\n                            )\r\n                            .then((res) => {\r\n                                setResult({ ...res.data, error: false });\r\n                                setLoading(false);\r\n                            })\r\n                            .catch((error) => {\r\n                                setResult({\r\n                                    ...error.response.data,\r\n                                    error: true,\r\n                                });\r\n                                setLoading(false);\r\n                            });\r\n                    }}\r\n                >\r\n                    Predict\r\n                </Button>\r\n            </section>\r\n            <section id=\"result-area\">\r\n                {loading && <Spinner />}\r\n                {result &&\r\n                    (result.error ? (\r\n                        <Input value={result.msg} error />\r\n                    ) : result.win ? (\r\n                        <Input value={'Win! ðŸ™‚'} positive />\r\n                    ) : (\r\n                        <Input value={'Loss ðŸ™ƒ'} error />\r\n                    ))}\r\n            </section>\r\n\r\n            <section id=\"desc-area\">\r\n                Enter your League of Legends summoner name and LoLGenius predict\r\n                the outcome of your current game! (NA Only)\r\n                {[\r\n                    <>\r\n                        Powered by{' '}\r\n                        <a\r\n                            href=\"blah doesnt matter\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                setIsDrawerOpen(true);\r\n                            }}\r\n                        >\r\n                            machine learning\r\n                        </a>\r\n                        !\r\n                    </>,\r\n                    '73% accurate!',\r\n                ].map((content) => {\r\n                    return (\r\n                        <ListItem\r\n                            artwork={(props) => <ChevronRight {...props} />}\r\n                        >\r\n                            <ListItemLabel>{content}</ListItemLabel>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </section>\r\n            <footer>\r\n                <div id=\"socials\">\r\n                    <a\r\n                        href=\"https://jeffersonli.dev/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        More\r\n                    </a>\r\n                    <a\r\n                        href=\"https://www.linkedin.com/in/jeffersonlii/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        LinkedIn\r\n                    </a>\r\n                    <a\r\n                        href=\"https://github.com/Jeffersonlii\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        GitHub\r\n                    </a>\r\n                    <a\r\n                        href=\"https://github.com/Jeffersonlii/LoLGenius\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        Source Code\r\n                    </a>\r\n                </div>\r\n                Â©{new Date().getFullYear()} Jefferson Li. All rights reserved.\r\n            </footer>\r\n            <Drawer\r\n                isOpen={isDrawerOpen}\r\n                autoFocus\r\n                onClose={() => setIsDrawerOpen(false)}\r\n                anchor={ANCHOR.bottom}\r\n                showBackdrop={false}\r\n                size={'auto'}\r\n            >\r\n                <ModelInfo></ModelInfo>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n","import './App.css';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nimport Dashboard from './dashboard/dashboard';\n\nconst engine = new Styletron();\n\nfunction App() {\n    return (\n        <StyletronProvider value={engine}>\n            <BaseProvider theme={LightTheme}>\n                <Dashboard></Dashboard>\n            </BaseProvider>\n        </StyletronProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}