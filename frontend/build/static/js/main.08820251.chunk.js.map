{"version":3,"sources":["dashboard/dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Dashboard","React","value","setValue","loading","setLoading","undefined","result","setResult","id","onChange","e","target","size","SIZE","large","placeholder","clearOnEscape","place","disabled","onClick","axios","get","replace","then","res","data","error","catch","response","msg","win","positive","map","text","artwork","props","Date","getFullYear","engine","Styletron","App","theme","LightTheme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTA2FeA,MAlFf,WACI,MAA0BC,WAAe,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,YAAe,GAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,gBAAeK,GAA3C,mBAAOC,EAAP,KAAeC,EAAf,KAEA,OACI,sBAAKC,GAAG,OAAR,UACI,yBAASA,GAAG,gBAAZ,wBACA,0BAASA,GAAG,aAAZ,UACI,cAAC,IAAD,CACIP,MAAOA,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAASQ,EAAEC,OAAOV,QACnCW,KAAMC,IAAKC,MACXC,YAAY,gBACZC,eAAa,EACbC,OAAK,IAET,cAAC,IAAD,CACIC,SAAUf,EACVgB,QAAS,WACLf,GAAW,GACXG,OAAUF,GAEVe,IACKC,IADL,wDAGsB,KAAVpB,EACM,MACAA,EAAMqB,QAAQ,MAAO,SAGlCC,MAAK,SAACC,GACHjB,EAAU,2BAAKiB,EAAIC,MAAV,IAAgBC,OAAO,KAChCtB,GAAW,MAEduB,OAAM,SAACD,GACJnB,EAAU,2BACHmB,EAAME,SAASH,MADb,IAELC,OAAO,KAEXtB,GAAW,OAvB3B,wBA8BJ,0BAASI,GAAG,cAAZ,UACKL,GAAW,cAAC,IAAD,IACXG,IACIA,EAAOoB,MACJ,cAAC,IAAD,CAAOzB,MAAOK,EAAOuB,IAAKH,OAAK,IAE/B,cAAC,IAAD,CACIzB,MAAOK,EAAOwB,IAAM,oBAAY,oBAChCC,UAAQ,QAKxB,0BAASvB,GAAG,YAAZ,yHAGK,CAAC,+BAAgC,iBAAiBwB,KAC/C,SAACC,GACG,OACI,cAAC,IAAD,CACIC,QAAS,SAACC,GAAD,OAAW,cAAC,IAAD,eAAkBA,KAD1C,SAGI,cAAC,IAAD,UAAgBF,YAMpC,2CACM,IAAIG,MAAOC,cADjB,6CC9ENC,EAAS,IAAIC,IAYJC,MAVf,WACI,OACI,cAAC,WAAD,CAAmBvC,MAAOqC,EAA1B,SACI,cAAC,IAAD,CAAcG,MAAOC,IAArB,SACI,cAAC,EAAD,SCADC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.08820251.chunk.js","sourcesContent":["import './dashboard.scss';\r\nimport { Input, SIZE } from 'baseui/input';\r\nimport * as React from 'react';\r\nimport { Button } from 'baseui/button';\r\nimport { ListItem, ListItemLabel } from 'baseui/list';\r\nimport ChevronRight from 'baseui/icon/chevron-right';\r\nimport axios from 'axios';\r\nimport { Spinner } from 'baseui/spinner';\r\n\r\nfunction Dashboard() {\r\n    const [value, setValue] = React.useState('');\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [result, setResult] = React.useState(undefined);\r\n\r\n    return (\r\n        <div id=\"host\">\r\n            <section id=\"title-section\">LoL Genius</section>\r\n            <section id=\"input-area\">\r\n                <Input\r\n                    value={value}\r\n                    onChange={(e) => setValue(e.target.value)}\r\n                    size={SIZE.large}\r\n                    placeholder=\"Summoner Name\"\r\n                    clearOnEscape\r\n                    place\r\n                />\r\n                <Button\r\n                    disabled={loading}\r\n                    onClick={() => {\r\n                        setLoading(true);\r\n                        setResult(undefined);\r\n\r\n                        axios\r\n                            .get(\r\n                                `http://127.0.0.1:5000/api/winprob-by-summoner/${\r\n                                    value === ''\r\n                                        ? '%20'\r\n                                        : value.replace(/\\s/g, '%20')\r\n                                }`\r\n                            )\r\n                            .then((res) => {\r\n                                setResult({ ...res.data, error: false });\r\n                                setLoading(false);\r\n                            })\r\n                            .catch((error) => {\r\n                                setResult({\r\n                                    ...error.response.data,\r\n                                    error: true,\r\n                                });\r\n                                setLoading(false);\r\n                            });\r\n                    }}\r\n                >\r\n                    Predict\r\n                </Button>\r\n            </section>\r\n            <section id=\"result-area\">\r\n                {loading && <Spinner />}\r\n                {result &&\r\n                    (result.error ? (\r\n                        <Input value={result.msg} error />\r\n                    ) : (\r\n                        <Input\r\n                            value={result.win ? 'Win! ðŸ™‚' : 'Loss ðŸ™ƒ'}\r\n                            positive\r\n                        />\r\n                    ))}\r\n            </section>\r\n\r\n            <section id=\"desc-area\">\r\n                Enter your League of Legends summoner name and LoLGenius predict\r\n                the outcome of your current game! (NA Only)\r\n                {['Powered by machine learning!', '73% accurate!'].map(\r\n                    (text) => {\r\n                        return (\r\n                            <ListItem\r\n                                artwork={(props) => <ChevronRight {...props} />}\r\n                            >\r\n                                <ListItemLabel>{text}</ListItemLabel>\r\n                            </ListItem>\r\n                        );\r\n                    }\r\n                )}\r\n            </section>\r\n            <footer>\r\n                Â©{new Date().getFullYear()} Jefferson Li. All rights reserved.\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n","import './App.css';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nimport Dashboard from './dashboard/dashboard';\n\nconst engine = new Styletron();\n\nfunction App() {\n    return (\n        <StyletronProvider value={engine}>\n            <BaseProvider theme={LightTheme}>\n                <Dashboard></Dashboard>\n            </BaseProvider>\n        </StyletronProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}